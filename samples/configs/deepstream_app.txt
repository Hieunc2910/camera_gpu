[application]
enable-perf-measurement=1
perf-measurement-interval-sec=2

[tiled-display]
enable=1

[source0]
enable=1
gpu-id=0
#Type - 1=CameraV4L2 2=URI 3=MultiURI 4: RTSP
type=4
uri=rtsp://admin:vh%40124578@192.168.1.95:554/Streaming/Channels/101
# (0): memtype_device   - Memory type Device
# (1): memtype_pinned   - Memory type Host Pinned
# (2): memtype_unified  - Memory type Unified
drop-on-latency=1
do-retransmission=1
latency=2000
cudadec-memtype=0
nvbuf-memory-type=0
select-rtp-protocol=0
rtsp-reconnect-interval-sec=60
rtsp-reconnect-attempts=5

[sink0]
enable=0
gpu-id=0
#Type - 1=FakeSink 2=EglSink 3=File 4=UDPSink 5=nvoverlaysink 6=MsgConvBroker
type=3
sync=0
source-id=0
nvbuf-memory-type=0
#1=mp4 2=mkv
container=1
#1=h264 2=h265
codec=1
output-file=./outputs/videos/Friends.mp4

[sink1]
enable=1
source-id=0
gpu-id=0
#Type - 1=FakeSink 2=EglSink 3=File 4=RTSPStreaming 5=Overlay
type=2
#1=h264 2=h265
codec=1
#encoder type 0=Hardware 1=Software
enc-type=0
sync=1
bitrate=4000000
#H264 Profile - 0=Baseline 2=Main 4=High
#H265 Profile - 0=Main 1=Main10
profile=0
# set below properties in case of RTSPStreaming
rtsp-port=554
udp-port=5400

[sink2]
enable=0
sync=0
# source-id=0
# msg-conv-broker-on-demux=1
#Type - 1=FakeSink 2=EglSink 3=File 4=UDPSink 5=nvoverlaysink 6=MsgConvBroker
type=6
msg-conv-config=config_msgconv.txt
#(0): PAYLOAD_DEEPSTREAM - Deepstream schema payload
#(1): PAYLOAD_DEEPSTREAM_MINIMAL - Deepstream schema payload minimal
#(256): PAYLOAD_RESERVED - Reserved type
#(257): PAYLOAD_CUSTOM   - Custom schema payload
msg-conv-payload-type=1
#(0): Create payload using NvdsEventMsgMeta
#(1): New Api to create payload using NvDsFrameMeta
msg-conv-msg2p-new-api=1
#Frame interval at which payload is generated
msg-conv-frame-interval=1
msg-conv-msg2p-lib=../../lib/libnvds_msgconv.so
msg-broker-proto-lib=/opt/nvidia/deepstream/deepstream/lib/libnvds_kafka_proto.so
#Provide your msg-broker-conn-str here
msg-broker-conn-str=10.1.1.41;9092
topic=face-detection
#Optional:
msg-broker-config=config_nvmsgbroker.txt
#(0) Use message adapter library api's
#(1) Use new msgbroker library api's
new-api=1

[sink3]
enable=0
source-id=0
gpu-id=0
#Type - 1=FakeSink 2=EglSink 3=File 4=RTSPStreaming 5=Overlay 6=MsgConvBroker 7=Hlssink
type=7
#1=h264 2=h265
codec=1
#encoder type 0=Hardware 1=Software
enc-type=0
sync=1
bitrate=4000000
#H264 Profile - 0=Baseline 2=Main 4=High
#H265 Profile - 0=Main 1=Main10
profile=0
hls-location=./outputs/hls/segment%05d.ts
hls-max-files=10
hls-playlist-length=5
hls-playlist-location=./outputs/hls/playlist.m3u8
hls-target-duration=1

[osd]
enable=1
gpu-id=0
border-width=4
text-size=18
text-color=0;0;0;1;
text-bg-color=1.0;1.0;1.0;0.5
font=Serif
show-clock=0
clock-x-offset=800
clock-y-offset=820
clock-text-size=12
clock-color=1;0;0;0
nvbuf-memory-type=0
display-mask=0
display-bbox=1
display-text=1

[streammux]
gpu-id=0
##Boolean property to inform muxer that sources are live
live-source=1
# buffer-pool-size=1
batch-size=1
##time out in usec, to wait after the first buffer is available
##to push the batch even if the complete batch is not formed
batched-push-timeout=40000
## Set muxer output width and height
width=1920
height=1080
##Enable to maintain aspect ratio wrt source, and allow black borders, works
##along with width, height properties
# enable-padding=1
nvbuf-memory-type=0
## If set to TRUE, system timestamp will be attached as ntp timestamp
## If set to FALSE, ntp timestamp from rtspsrc, if available, will be attached
attach-sys-ts-as-ntp=0
sync-inputs=1
# config-file=config_sreammux.txt

# config-file property is mandatory for any gie section.
# Other properties are optional and if set will override the properties set in
# the infer config file.
[primary-gie]
enable=1
batch-size=1
gpu-id=0
interval=0
gie-unique-id=1
nvbuf-memory-type=0
config-file=config_infer_primary.txt

[tracker]
enable=1
gpu-id=0
# For NvDCF and DeepSORT tracker, tracker-width and tracker-height must be a multiple of 32, respectively
tracker-width=640
tracker-height=384
ll-lib-file=/opt/nvidia/deepstream/deepstream-6.0/lib/libnvds_nvmultiobjecttracker.so
# ll-config-file required to set different tracker types
# ll-config-file=config_tracker_IOU.yml
# ll-config-file=config_tracker_NvDCF_perf.yml
ll-config-file=config_tracker_NvDCF_accuracy.yml
# ll-config-file=config_tracker_DeepSORT.yml
enable-batch-process=1
enable-past-frame=0
display-tracking-id=1

[secondary-gie0]
enable=1
batch-size=8
gpu-id=0
gie-unique-id=2
operate-on-gie-id=1
# operate-on-class-ids=0;
nvbuf-memory-type=0
config-file=config_infer_secondary_recognition2.txt

[tests]
file-loop=0
